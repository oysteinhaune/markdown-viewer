{"version":3,"sources":["components/Editor/Editor.js","components/Previewer/Previewer.js","components/App/App.js","serviceWorker.js","index.js"],"names":["Editor","className","defaultValue","this","props","onChange","id","rows","cols","React","Component","Previewer","md","Remarkable","__html","render","dangerouslySetInnerHTML","getRawMarkup","App","require","state","input","unescape","handleChange","bind","event","newText","target","value","sanitizedText","DOMPurify","sanitize","setState","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTAeeA,G,mLATX,OACE,yBAAKC,UAAU,UACb,qCACA,8BAAUC,aAAcC,KAAKC,MAAMF,aAAcG,SAAUF,KAAKC,MAAMC,SAAUC,GAAG,SAASC,KAAK,KAAKC,KAAK,Y,GAN9FC,IAAMC,Y,gBC2BZC,E,kDAxBb,WAAYP,GAAQ,IAAD,8BACnB,cAAMA,IACDQ,GAAK,IAAIC,IAFK,E,2DAMjB,MAAO,CAAEC,OAAQX,KAAKS,GAAGG,OAAOZ,KAAKC,MAAMF,iB,+BAI3C,OACE,yBAAKD,UAAU,aACb,wCACE,yBACEA,UAAU,UACVK,GAAG,UACHU,wBAAyBb,KAAKc,sB,GAjBlBR,IAAMC,W,iBCiCfQ,GAjCAC,EAAQ,I,kDAIrB,WAAYf,GAAQ,IAAD,8BACjB,cAAMA,IACDgB,MAAQ,CAEXC,MAAOC,SAAS,gVAElB,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBANH,E,yDAUNC,GACX,IAAMC,EAAUD,EAAME,OAAOC,MACvBC,EAAgBC,IAAUC,SAASL,GAEzCvB,KAAK6B,SAAS,CACZX,MAAOQ,M,+BAKT,OACE,yBAAK5B,UAAU,OACb,kBAAC,EAAD,CAAQI,SAAUF,KAAKoB,aAAcrB,aAAcC,KAAKiB,MAAMC,QAC9D,kBAAC,EAAD,CAAWnB,aAAcC,KAAKiB,MAAMC,a,GAxB1BZ,IAAMC,YCIJuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASvB,OACP,kBAAC,IAAMwB,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1f539475.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Editor.css';\r\n\r\nclass Editor extends React.Component {\r\n  render() {\r\n\r\n    return (\r\n      <div className=\"Editor\">\r\n        <p>Editor</p>\r\n        <textarea defaultValue={this.props.defaultValue} onChange={this.props.onChange} id=\"editor\" rows=\"20\" cols=\"50\"></textarea>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Editor;\r\n","import React from 'react';\r\nimport './Previewer.css';\r\nimport { Remarkable } from 'remarkable';\r\n\r\n\r\nclass Previewer extends React.Component {\r\n  constructor(props) {\r\n  super(props)\r\n  this.md = new Remarkable();\r\n  }\r\n\r\n  getRawMarkup() {\r\n    return { __html: this.md.render(this.props.defaultValue) };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Previewer\">\r\n        <p>Previewer</p>\r\n          <div\r\n            className=\"content\"\r\n            id=\"preview\"\r\n            dangerouslySetInnerHTML={this.getRawMarkup()}\r\n          >\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Previewer;\r\n","import React from 'react';\nimport './App.css';\nimport Editor from '../Editor/Editor.js'\nimport Previewer from '../Previewer/Previewer.js'\nimport DOMPurify from 'dompurify';\nconst marked = require('marked');\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      // må unescape for markup funksjonen støtter bare ren tekst.\n      input: unescape(\"%23%20H1%20Title%0A%0A%23%23%20H2%20Title%0A%0A%3Chttp%3A//freecodecamp.org/%3E%0A%0Ainline%20%60code%60%0A%0A%60%60%60%0Afunction%28%29%20%7B%0A%20%20const%20%3D%20%22A%20code%20block%22%3B%0A%7D%0A%60%60%60%0A%0A1.A%20list%20item%0A%0A%3EA%20blockquote%0A%0A%21%5BAlt%20text%5D%28http%3A//tiny.cc/cd0soz%29%0A%0A**Bolded%20text**\"),\n    }\n    this.handleChange = this.handleChange.bind(this)\n  }\n\n\n  handleChange(event) {\n    const newText = event.target.value\n    const sanitizedText = DOMPurify.sanitize(newText);\n\n    this.setState({\n      input: sanitizedText\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Editor onChange={this.handleChange} defaultValue={this.state.input}/>\n        <Previewer defaultValue={this.state.input}/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}